### Introduction
<!-- Editing Guide: The pipe (|) position in this comment is 120:                                                       | -->

Hello everyone thank you for joining our webinar for today thanks for joining Data Umbrella I'm gonna do a quick  
introduction Carol Willing is going to do her talk and we'll have a Q&Asession at the end and and this webinar is being  
recorded a little bit about me I'm a statistician data scientist I'm the founder of Data Umbrella and I am on Twitter  
LinkedIn GitHub has raised my s feel free to follow me we have a code of conduct we're dedicated to providing harassment  
free professional respectful experience for everyone this applies to the chat as well thank you for helping make this a  
welcoming and friendly community for all of us about Data Umbrella we're an inclusive community for underrepresented  
persons in data science we welcome allies to join us and we are a volunteer run organization so how can you support Data  
Umbrella the first and foremost is to follow our code of conduct the second is we have a discord community chat so feel  
free to join it the link is on our website and there you can ask questions and answer questions as well for the  
community we have an open collective feel free to also if you want to donate there to cover our Meetup dues and other  
operational costs and we have a new initiative called you know we're doing transcripts for all of our talks and it is  
the transcripts are on GitHub and it requires knowing some Mark down and how to submit a pr either via terminal or  
GitHub so check out this link GitHub.com Data Umbrella event transcripts for more information we also have a job board  
which is under jobs.dataumbrella.org if you are looking for a position or just curious feel free to check it out we have  
two highlighted jobs today the first is a software engineer position at oscar health which is based in New York city  
it's a health insurance company and they are developing seamless technology and provide personalized support to members  
to navigate their health care and they have some other roles open as well so but check it out our next job that we're  
highlighting is a machine learning engineer by development c that they are based in Washington DC or Lisbon Portugal or  
it can be a remote position for now and what they do is they're mapping elections from Afghanistan to the us analyzing  
public data and economic data and leading strategy and development behind data.world bank and other other social  
enterprise initiatives these are just just a sprinkling of what we have available on our website there's a lot of  
resources on responsibility on accessibility on open source so check that out on your own we have a monthly newsletter  
it is dataumbrella.substack.com so feel free to sign up for it we only send it out once a month so we promise not to  
spam you with too much email we are on date umbrella is on a bunch of different platforms under Data Umbrella so  
depending on what your preference is the best place to actually be a member is the Meetup group because that's where all  
the events are posted our website has resources we are on Twitter we are on LinkedIn we are on YouTube if you want to  
subscribe to our channel I will post some of these links once I finish this intro presentation on the chat so you can  
follow it and before we begin I just want to let you know that next week where our upcoming event is using streamlit for  
 

#### 00:04:01,280::		4 minutes mark -> new paragraph 
 
data science with Thomas fan Thomas is also a core contributor to scikit learn and streamlit is a way to build and share  
data apps in Python and I think it's going to be a great presentation and I'm so glad that Thomas said yes when I  
invited him and asked him a little bit about today's speaker Carol Willing Carol has an msn management from MIT and a  
bsc in electrical engineering from Duke University she is a core developer of core Python she is a member of Python's  
steering council for project Jupyter Jupyter notebook as many of us have used she's on the steering council and works as  
a core developer on Jupyter health and mybinder she is also co-editor of the journal of open source education and she  
co-authored an open source book teaching and learning with Jupyter there's a lot more that Carol has accomplished but I  
was running out of space so I will let Carol take it over from here oh and and just just one more thing we have a Q&A 
tab on this platform so if you have any questions just post them there if you do post them on the chat it's not a  
problem I can easily move them over to Q&Aand if you want to upvote them you know I think we'll have time to answer  
everyone's questions but feel free to upload to see what's really exciting and important for you and I will hand it over  
to Carol thanks russian thank you all for being here and thank you for the sponsors and everybody who organizes groups  
it's really important and it helps us as an ecosystem gets stronger I am going to start sharing my screen hopefully and  
once roshama lets me know that you guys can see everything then I will start there was a little bit of a lag before but  
OK well I'm going to assume you can see my slide deck otherwise somebody please shout so today I'm going to talk about  
contributing to core Python but I'm going to do it from the lens of a scientist or a data scientist so it's going to be  
my opinionated view of working in all of these communities and for those that are advanced users you will find something  
useful in this for those of you that have never contributed to open source you should also find a lot of really useful  
stuff as roshama went through my bio the ending part talked about education and using tools and that is really where my  
heart and passion is less about the technology and more about building tools that empower other people to do good things  
in the world and I think our science and data science ecosystem helps us do that really well so let's get started so yes  
core Python and c Python are the same thing you will hear them used interchangeably and for all intents and purposes you  
can just assume that they are actually the same so for today's talk we're going to look at this from a data and science  
perspective so the primary audience is data scientists scientists data engineers but other folks that might get value  
out of this are computer science compiler engineers operating system experts language geeks but that won't be the focus  
of the talk it will be the data folks and science fics OK so contributing to core Python today I'm going to walk a  
little bit through how core Python is organized today  
 

#### 00:08:01,440::		4 minutes mark -> new paragraph 
 
then I'm going to compare it to other open source projects in our ecosystem of data and science scikit-learn is a great  
example of that and then we'll talk about getting started and how you can go further with your contributions to either  
see Python open source your local community and more so we had an interesting thing happened a couple of years ago Gita  
Van Rossum who had been the benevolent dictator for life of Python stepped down and we were faced with having to create  
a new governance for core Python and what we came up with was a small steering council these are the members currently  
who sit on the steering council and really we are to sort of do and set the direction of things that guido did by  
himself in terms of organization in the project and direction of the project and in specific we are tasked with ensuring  
the quality and stability of the language moving towards contributions that are accessible inclusive and sustainable  
fostering a stronger relationship with the Python Software Foundation continuing to facilitate the decision-making  
process for peps which are Python enhancement proposals those are when there are large changes made to the language or  
proposed to the language or workflow that's something that is open for everybody to read and comment on and our goal is  
to seek consensus both with each other but also the community at large because we don't want to be a dictator of the  
direction of Python so as we look at core Python what kinds of contributions are needed lots but I want to first step  
back and look at the Python Software Foundation which is a sister organization to the core Python developers yeah and  
yeah sorry just we don't we see you but we don't see your slides -oh so maybe if you can just share again maybe let me  
stop sharing and re-sharing yeah that might that might work ah that might work let's see if escape will do it worked in  
practice right let's do it again OK now you should see my whole desktop is that correct OK it takes just a couple of  
seconds for the lag it is loading which is good and now we can see your whole desktop yep and now you should be able to  
see the talk yep now we can see the talk and we can see you OK so speed version the title of the talk core Python  
opinionated guide for scientists and data scientists yes core Python is the same thing as see Python I'm targeting this  
to the scientists and data scientists and data folks in the audience we're going to go through a few different ways of  
contributing to core Python and beyond I started with a quick discussion of governance or introduced the steering  
council what the steering council is responsible for and now back to you which contributions does see Python need and  
looking at the mission of the Python Software Foundation is a good place to start the Python Software Foundation is a  
sister organization to the core Python group and its goal is to promote protect and  
 

#### 00:12:01,440::		4 minutes mark -> new paragraph 
 
advance Python the language as well as to grow a diverse and international community of Python programmers so as you  
think of making contributions keep that in the back of your head because those are really going to be the most valuable  
contributions some ways you can contribute and oftentimes people look at writing new code as the only way to contribute  
and it is a great way to contribute but in many ways a lot of these other ways to contribute are equally if not more  
important when you're adding new code it's got to be with backward compatibility we're a 30 year old language you know  
people don't are using this in production they don't want things breaking maintaining security anything that you can do  
to maintain the security of the language or improve core development workflows so mariada has put together a lot of bots  
that make our core development workflow much easier for folks to get started and also for GitHub and the power of  
technology to kind of help with some of the more tedious tasks writing and running tests writing and editing  
documentation both of those are absolutely critical to the success of any open source project Python as well one huge  
need we have is folks to triage bugs for reproducibility and in addition to that people to review open prs right now  
we're split our code base is on GitHub but our bug issue tracker is on bugs.Python.org so there's sort of an extra step  
between the two so it it's helpful with decreasing the backlog of prs and bugs for people to help triage and review prs  
and in the last year we've actually started a triaging team which is in many ways a stepping stone to core development  
and then really anything that you do to share your knowledge with the community maintain projects give talks write blog  
posts attend meetups that is a contribution to core Python so congratulations you've all made your first contribution to  
core Python or at least the Python ecosystem so I'm going to spend a minute comparing the different projects and  
comparing and contrasting Python versus other projects that are younger like Jupyter matplotlibs scikit-learn and more  
so what's similar well most of these projects use a GitHub workflow and with that I mean we host our source code on  
GitHub or gitlab and we operate with a pull request mindset and what that means is a pull request is hey I would like  
you to take my code and add it to your code base and then a maintainer will either say yes that sounds like a great idea  
I accept it or gee could you make these changes and then resubmit it or in some cases when it's just not an appropriate  
contribution we might say you know what this would be better as a third party project or another project all projects  
have code review and that's when maintainers and core developers look through code that's being submitted or  
documentation that's being submitted  
 

#### 00:16:01,680::		4 minutes mark -> new paragraph 
 
and make suggestions hopefully very kindly about what could be changed or improved and many strong projects have  
automated testing and continuous integration and it's really valuable to have that as part of your project because it  
provides sort of an independent view of what's going on so as a contributor it sort of provides you guidance OK I've  
done like the correct syntax or formatting if I'm submitting code or documentation and one thing that I forgot to  
mention but is really important is healthy open source projects have not only a code of conduct but also an onboarding  
guide or a developer guide that helps new contributors get started and helps existing contributors build their skills so  
what differs well there's a fair amount of stuff that differs between see Python and other data science projects like  
Jupyter and Jupyter hub and binder that I've been involved with and one of the most important or biggest ones is the  
velocity at which new features are added to the project Python's a 30-year language has a long history and a lot of code  
out in the wild that are being used in production in scientific research and as such we can't just go and change things  
as quickly as we could in a newer project because we have more embedded users the other thing that's different about  
core Python is it's a language that's used far beyond just data and science so not only do we have to status the data  
satisfy the data and science community but we also have communities around web development sys admin devops embedded  
systems teaching and so forth so when we look at Python we're looking at OK how do we keep stability and backward  
compatibility and security while adding new features and in many of these other scientific projects it's a bit flipped  
we're looking for adding new features while also creating you know a stable though often changing environment we might  
deprecate things which is stop using things or offering things in a two-year window where Python it would be much longer  
could be five years could be ten years and then the context in which these projects are used is also different see  
Python is a tool that we use to build things and it's a tool that is used as a foundation for many of these projects  
like Jupyter or matplotlib to create their own project so the stability of c Python is critical to the stability of our  
entire data and science ecosystem because what we don't want to do when we make a new Python release is break a whole  
bunch of other projects and so yeah so that should give you a sense of the fact that Python's going to move a little  
slower really emphasize code and quality and security whereas some of these scientific and data science projects are  
going to move much quicker and you'll see a lot of change in even a year or two years so how do you get started  
contributing  
 

#### 00:20:02,320::		4 minutes mark -> new paragraph 
 
or if you're already contributing how do you continue and perhaps grow your skills well if you're a first time  
contributor to open source I want to strongly encourage you to consider making your first contribution be a contribution  
to a project in the scientific data science community and I'm going to go so far since it's my opinionated talk to say I  
would encourage you to do that over making c Python your first contribution and the reason why is you will find going  
back to the differences between the projects and Python language the velocity of change is much higher in these projects  
like scikit-learn so it actually winds up being a way to learn while doing and make an impact while you're learning  
which is much harder to do in see Python and I highly encourage you to go watch both of these or read the transcripts  
they're excellent so as you get ready to contribute to see Python and this would apply to most open source projects as  
well you want to kind of get into a mindset that will set you up for success and one of the first things you can do is  
sort of check your intent or really identify why you want to contribute and the reason I say that is when things get  
bumpy along the way it's easier to persist in the process when you have clear goals of what you're trying to accomplish  
and why and I would encourage you to think about your initial impact and initial scope keep it small it's much easier to  
start small and then work up to big and I want to also say that patience is probably one of the best things that you can  
have along with communication skills in open source most projects are run by volunteers the vast majority of core  
developers foresee Python are volunteers all the stuff I do is as a volunteer on my time notable gives me a lot more  
latitude than most companies to work on open source but it's not my primary job and there's less than a handful of folks  
within the core development team where it is their primary job all right so you've got the right mindset you're setting  
yourself up for success what are some of the common reasons that people contribute to open source and these are just a  
few of many you're using a project whether it's a scientific Python project and you hit a bug and that bug possibly is  
related to something in c Python so you might want to fix something in c Python to make your other project run better  
you might have come across something that perplexed you or was complicated to learn so you might want to improve the  
documentation so the next person doesn't have to go through the same process a lot of people just think it would be cool  
to contribute to Python which is a totally valid reason many people want to just understand more about how things work  
and to strengthen their development skills so this is just a small subset but some things that come up time and  
 

#### 00:24:00,880::		4 minutes mark -> new paragraph 
 
again so your most important research resource when contributing to core Python is what we call the dev guide and it's  
located at devguidepython.org it is a comprehensive guide to contributing to Python and it's maintained by the core  
developers that also maintain the language it is pretty much everything you ever wanted to know about contributing to  
Python and then some as such there is a quick reference guide which is really a great place to start and we'll talk  
about it in a little bit but there's also things about how to submit a pull request how to get help how to run tests and  
many other resources so this is sort of your one stop if you will towards getting started and many other projects have  
something similar perhaps not as long but yeah so some other helpful prerequisites that will improve your contribution  
experience to see Python is to take a little time to understand see Python's culture and that can be there are there's  
different aspects of the culture because we have people that have you know been with the Python language for 30 years  
versus are relatively new in the last five years to core Python you're going to have people with different perspectives  
and different work styles within the language personally I spend a lot of time looking at discourse which is  
discussed.Python.org and less time looking at mailing lists partially because I find more value in discourse than in the  
mailing list but there's a lot of core developers that do the reverse so and then I also spend a lot of time looking at  
the pull requests and the code itself so understanding the culture and where to find information and how the pace at  
which things happen is really important also understanding the difference between the core language and the standard  
library the core language is a smaller subset of what you would think of as core Python and then the standard library is  
actually many other smaller libraries that provide additional functions that gave Python the batteries included name and  
core Python core lang the core language is really things like data types and really the fundamentals that you would have  
in any software development language again I can't reiterate enough that core developers are volunteers and be kind many  
of us are wearing many different hats on the flip side the core developers should be kind to you as well so we do have a  
code of conduct and you know I encourage you if you're seeing behavior that is not professional please let folks know  
understanding git and GitHub workflow is I think very important for contributing to core Python at the point where  
people are contributing to core Python the general assumption in the community is that you have basic git and GitHub  
workflow experience and understanding and if you jump back to where I said  
 

#### 00:28:02,159::		4 minutes mark -> new paragraph 
 
oh I I am encouraging you to also consider contributing to other data science and science libraries partially it's  
because those projects tend to be a little bit gentler with new contributors that are still learning git and GitHub and  
there's lots of information out there about doing it software carpentry or the carpentries have a great guide and  
there's a talk which maybe we can link to in the future unfortunately it wasn't recorded but a slide deck that I put  
together gosh probably 2016 for complete beginners at writespeak code who are learning git and GitHub and it really is a  
very gentle introduction to both but has been very popular and then the other prerequisite is some familiarity of Python  
it's not necessary to know c it's not necessarily to know c plus so most of the language is written in Python so you can  
be very effective without really understanding much if at all from c or c plus plus so that's a lot to digest and I  
wanna for those of you that want a great exercise later or when you're ready I wanna just give you the brief directions  
on how to build core Python from source and people often think it's a really super complicated process and the quick  
reference guide in the dev guide actually runs through these steps there may be some subtleties based on the operating  
system that you're running but essentially what you're going to do is fork and clone the source code from GitHub which  
is at Python c Python then you're going to use a c compiler and most of the time c compiler is kind of available with  
your operating system to configure and build Python it's one command to configure and build it with unix Linux and mac  
make is what will actually do the actual building and then windows there's a bat file that combines those same steps so  
to configure and build Python is one step so what would you want to do as you're starting well a good place is just to  
run the tests and again like building and config and configuring Python it's one line of code and there are this should  
look pretty familiar with folks that have done Python it's just basically executing the test library so there you go you  
have now learned how to build configure and run tests for Python the dev guide will definitely give you additional  
questions and answers on how to contribute again remember changes to the language are submitted as GitHub pull requests  
our continuous integration will run the automated tests just like you're running them locally it will run them in an  
automated way across all operating systems and a number of different versions of Python the next step in the process if  
you  
 

#### 00:32:00,640::		4 minutes mark -> new paragraph 
 
submit a pr would be to wait for some review from a core developer or a contributor address the feedback as appropriate  
and hopefully then you will have a final core developer review and if luck will have it it'll be merged into the code  
base and folks can use it from then on for those of you that want to go deeper in your understanding of see Python there  
is a wonderful blog post which is now a book by Anthony shaw about a guide to see Python source code it is the most  
accessible yet highly technical explanation of how see Python works you know down to the lowest levels in fact it was so  
good that when it first came out I took the entire blog post copied it all had it bound in a spiral you know thing so  
that I could refer to it on a day-to-day basis and I encouraged Anthony to write a book based on it and he did so we're  
very lucky that there's many ways of accessing his materials and he's also a very prolific speaker so there's lots of  
stuff on YouTube as well another great resource for learning about Python I don't know if you can see me or if you're  
just seeing my slides but there is a book called high performance Python by Misha Gorlach and Ian Oswald and it is I  
think an outstanding book for both learning Python and how it is built and comes together but also the things you can do  
to improve the performance of Python one of the things you might hear in the media is Python is slow Python you know  
isn't performant because there is this global interpreter lock or gill and the global interpreter lock or gill what it  
does is it limits at certain points the processing to one thread if you will at a time and that tends to be a bottleneck  
because right now we have many multi-core processors and things like that you'd want to use all that and not have to  
bottleneck into things but this high performance Python it runs through things like how to profile your code how to use  
multi-processing how to use cython which is a great project in our ecosystem in terms of that allows us to do a lot of  
more CPU intensive stuff I believe it also covers number which is also another great project that kind of uses just  
entire time compilation to get around the gill so yeah there's lots of ways you can improve your performance and these  
two resources are just some of the many that are out there in addition to those resources there are many core developers  
keep websites that have a lot of technical content victor stinner Brett cannon and guido a lot of historical information  
from guido as well much like the sprints that have been held for scikit-learn see Python typically runs sprints when we  
have  
 

#### 00:36:01,680::		4 minutes mark -> new paragraph 
 
in-person conferences which sadly 2020 but you know the hope is that there will be some being done virtually and you  
know if anybody wants to run the c Python sprint let me know I'd be happy to kind of help guide you with that many of  
the Python Python talks both from pycon us and beyond explain how to contribute to core Python I think my Python talk  
from 2015 was how to contribute to core Python when you're not a core developer mariada's given great talks about  
contributing both to the language and to the workflow of victor stinner and for those of you that have any interest in  
asynchronous programming lucas has a great series on YouTube about async io I think it's about seven parts and it's a  
really great introduction so we can always use help from folks that are interested in asynchronous and this is just a  
small subset maybe a third of the core developers as volunteers our time is limited but the community is key and it's  
what lets Python both as a language and ecosystem thrive so I want to encourage you to go forward and contribute join  
the discussion on discourse which is discuss Python.org and whether you're contributing to Python or any of the projects  
in the ecosystem you are creating real change and helping others solve important progress problems in the world so I  
want to thank you for listening to me and thank you to roshama and the organizers and I'm going to shut off my screen  
this is already available on speaker deck and it will be available through Data Umbrella as well and I am happy to take  
any questions that might have come up OK so there's a question about the slide so I will find all right speaker deck  
for that speaker deck OK so the next question is is the need to reproduce old bugs against the newest version of three  
nine in need of the project depends on how old the bug is if the bug is like within two years old I'd say yeah it's  
probably useful to reproduce those if in general my view and it's strictly my view it's not a official view in any way  
or shape or form personally I would close the vast majority of issues that are over let's say three years old and  
because they're still accessible to people to find if needed but the likelihood of them being worked on I think is  
fairly low we are going to move the issue tracker to GitHub there is work in process to do so and that should make the  
whole process more streamlined and it will let us do some things with notebooks and some of the tools that we have in  
our ecosystem to help surface issues that haven't been looked at to help recognize contributors there's many different  
things we can do with the data that is available within  
 

#### 00:40:01,040::		4 minutes mark -> new paragraph 
 
the repo hopefully that answers the question OK the next question is g-I-l is a problem but the advice I've seen is  
avoid being limited to one core is to use multi-processing over threads OK so there's a lot of different perspectives  
and the gil or gill which is the global interpreter lock there are different ways of getting performance that gets  
around the limitations of the global interpreter lock multi-processing is a great way I would say threads would not be  
my first choice in how to do that but things like cython number you know depending on the use case async io but yeah  
it's a great question and the resources that I mention particularly high performance Python will give you excellent  
advice on how to get the most out of your deployments in a safe and efficient way OK and the next question is what is  
the best way to attract a mentor from the core team does the project have a formal process for being mentored so there  
is a core mentorship mailing list which used to be more active right now mentors you know because we're all volunteers  
people mentor as they are able to I typically my mentoring is basically being welcoming and answering questions that  
people directly ask me I just don't have the time and bandwidth to mentor individuals but one of the things that we do  
have is the triage team so if you've been involved for a while somebody may ask you hey do you want to join the triage  
team and the triage team you know it has some additional capabilities they can do things like make comments or attach  
labels to different issues and that's really a great way that recently folks have found mentors as a result of the work  
that they were doing within triage and then victor stenner has been really great at mentoring folks as well as you know  
Barry Raymond Hedger you know there's a lot of people that do Eric Snow pablo Salgado who's our release manager for 310  
and 311 have also mentored fix and victor's got a lot of writing on it so hopefully that helps and feel free to reach  
out to me directly and I can probably provide additional resource what's the best way to reach you Carol Reshama knows  
this I stink at email GitHub is really the best way to at mention me on something but you know my dms are open on  
Twitter and you know I will get to it when I can get to it it's not that I don't want to respond but the volume of stuff  
that comes in is I could spend my whole day doing email and nothing else so you know I tell folks that I meet you know  
be persistent if you don't hear from me once or twice do not hesitate to email me a third time and I will do my best to  
answer OK the next question is from your viewpoint  
 

#### 00:44:01,280::		4 minutes mark -> new paragraph 
 
what does the future hold for Python for instance for the next 30 years wow that's 30 years I hope that Python is as  
vibrant today as 30 years 30 years from now as it is today I think in many ways you know the whole data science  
scientific Python ecosystem has been one way that has really revitalized the language over the last five years another  
place that we're seeing a lot of growth is in embedded systems things like micro Python and circuit Python and you know  
that's really exciting to me from an open hardware and education standpoint and and getting young folks or folks that  
maybe aren't computer scientists to start with involved I would love to see us can improve the performance of the  
language and what that will look like I'm not entirely certain there's definitely going to be efforts over the next five  
years to do that some of it is time some of it is funding but I the one thing I hope stays the same 30 years from now is  
the readability of the language and I think because Python is so readable that actually makes it much more accessible  
for folks as well as tools like the notebook kind of break down and provide a good education tool for learning more  
about Python so the community is going to be the one though that drives where Python goes and truth be told there's  
another language that I also find really interesting that probably is relevant to many members in this community and  
that is julia it's still a very young language but I think it has a lot of potential and promise and is very similar to  
Python in a lot of ways but gets around issues like the gill and relies more on c c plus and should you ever want to  
compare julia code with Python code Tom Sargent's quant econ website is excellent for doing that because even if you're  
not an economics person it has economics code written in Python and then similar economics code written in julia and  
it's a good compare and contrast when you're learning so I don't know that's about all I can say for the future that's  
there's been a lot of discussion I see going on because o'reilly published a report too about Python and I guess speed  
is the thing that's most under discussion right it these days you know it it's interesting because oftentimes and and  
this has been historically you know I'm 54 I've been in this industry a long time speed has always been at the key like  
is this faster than the other is vim faster than emacs is emacs faster than vim you know speed is relative and it  
depends on what you're measuring I would say one of the things that is not often discussed and really should be is the  
speed to create a project and Python is a really efficient language for going from no code to prototype to production  
and there's value in that beyond just pure processing power and  
 

#### 00:48:00,079::		4 minutes mark -> new paragraph 
 
now that said there are you know certain things that if you're CPU bound like high CPU operations versus io operations  
and you know web is going to be different than pure number crunching you know your performance is going to vary and one  
of the things I think that would be really useful is to try out like profile your code look at the other tools for  
increasing the speed you know there's trade-offs regardless of what language you use and I encourage you to try other  
languages as well there's another question about you mentioned the global reach of the tech community aside from events  
like this what is the role of the Python steering committee in making the community more inclusive so the steering  
council has been a part of some of the code of conduct decisions and discussions related to core developers and we have  
this year taking some actions to redirect or remove folks that were probably not contributing constructively to the  
community the so you know adopting the code of conduct throughout the project was one way the steering council also  
looks at efforts whether it is the core language summit or the core developer sprints those used to be exclusive to only  
core developers and in more recent years we've invited more people to it that to both increase the diversity on a number  
of dimensions as well as just even use cases my hope has long been that diversity will benefit from the move to GitHub I  
was an early proponent of moving the code base to GitHub and have been a strong advocate for moving the bug tracker to  
GitHub or or it could have been gitlab but something where the tooling is modern and is more accessible to more people  
because one of the things I personally feel when you're an underrepresented group your time is more limited than if you  
are in the majority so you have to pick and choose what you work on much more carefully and by having a roadblock like  
having to learn an issue tracker versus using tooling that you're used to from your day-to-day work I think that adds a  
barrier to inclusion so [music] yeah so it's really trying to shift the culture towards more inclusive culture mariata  
has done an amazing job with that and you know the steering council is really there to support the efforts within the  
community and the core developers that are interested in moving that effort forward also just to add you know PyLadies  
which is you know under Python Software Foundation is also  
 

#### 00:52:00,720::		4 minutes mark -> new paragraph 
 
connected to improving inclusivity in the Python space yes yes that's a great suggestion or comment because we also have  
within PyLadies there's the ability to ask questions just like with our ladies there's an ability to ask questions on  
core development within those channels another question here is what will be the impact of the new peg parser in future  
Python tools and libraries and maybe you could explain what peg means to someone like me who doesn't know so it's we  
affectionately call it the peg parser and when you're creating a language you have a grammar you know your syntax and  
the language has to have a way to sort of know OK this is a keyword this is a variable this is an operation things  
like that and that is the job of the parser I believe that the peg parser will give us more flexibility over time it is  
probably equally as performant as the prior parser and there was a lot of extensive testing done during an entire  
release cycle to make sure that you know it wasn't introducing weird regressions and things like that but one of the  
things it is much easier to write grammar rules now with the peg parser than it was with the old parser that we have so  
hopefully that ans answered a little bit what it is and why it is and and someone who can provide far more answers than  
I would be pablo Salgado and do reach out to him he's probably got some talks on the peg parser as well and one last  
question which is I heard a talk that is a twist on the speed demand instead of focusing developer time expertise on on  
optimizing to a capital o one go with n squared performance because developer time is more expensive than ram is what  
are your thoughts on that I I think it really comes back to use cases and I think the difficulty with Python is because  
we serve so many different communities what is optimal for one community may not be optimal for other communities so you  
know it's an approach is it the approach I don't know to be really honest it wouldn't be my first approach I guess is  
what I'm saying OK so with that we are reaching the top of the hour and so thank you so much Carol for taking the time  
to join us and sharing about core Python I have a link to the slides I put them in the chat and I'll include them in the  
video when it's uploaded to YouTube and there's a bunch of links to that you've mentioned which I've been putting in  
chat and I will link to it in the you know YouTube description or somewhere very convenient yeah thank you so much great  
thank you and thank you everybody for attending I hope you learned something about contributing to open source and I  
hope you you do so as you're ready to do it thank you  
 
