{"presenter": "Ali Spittel", "title": "Navigating Your Tech Career (The Career Advice I Wish I Had)", "year": "2020", "transcript_md": "04-ali-spittel-career.md", "meetup_url": "https://www.meetup.com/nyc-data-umbrella/events/270750046/", "yt_video_id": "1X5h0FRqKVs", "slides_url": "https://docs.google.com/presentation/d/1TmOV7METdgBjDkTHhy_C2fZwYWUZ7fJFgQ8BAZIKqZc/edit?usp=sharing", "repo_url": "N.A.", "notebook_url": "N.A.", "transcriber": "Janine", "extra_references": "N.A.", "video_href_w": "25%", "video_href": "http://www.youtube.com/watch?feature=player_embedded&v=1X5h0FRqKVs", "video_href_src": "http://img.youtube.com/vi/1X5h0FRqKVs/0.jpg", "video_href_alt": "Navigating Your Tech Career", "formatted_transcript": "All right it's 7:05 so I'll do my intro bit and we can hop into yours. Awesome. \n\nTy: Hey everyone. My name is Ty I will be doing an intro, a quick intro and then Ali will be giving her presentation. If you have questions there's a QA function in Zoom so you can ask the questions there. If I can answer it I'll help answer if not we will run through them at the end. Awesome. Okay so I'm just gonna give a quick introduction then Ali will talk and then we'll do QA. This will be recorded so if something happens you have to leave or someone you know wasn't able to attend, the recording will automatically be sent out by General Assembly. Usually I think it's within a day but it might be two days. So just an intro on Ali.  She teaches people how to code. She loves Python, JavaScript and talking about code and she's always been interested in programming, art and education. She's on the distinguished faculty at General Assembly and then she runs courses there. So her home page alispit.tel.  She\u00e2\u20ac\u2122s got a pretty cool domain name there. What is .tel?\n\nIs that...what, like, region is that? \n\nAli: It is like telephone. \n\nTy: Oh telephone.  \n\nAli: Telecom .telecom. \n\nTy: Telecom OK and then her Twitter as well (@aspittel). And then we're throwing the event with Data Umbrella. So Data Umbrella is a Meetup group that provides welcoming and educational spaces for underrepresented groups in the fields of data science and machine learning. So you can check them out at dataumbrella.org and on Twitter @DataUmbrella and then our lovely co-hosts, PyLadies New York City. So it's a group for Python ladies and nonbinary people of all levels of programming experience and we're throwing the event with the New York City Chapter but they are a global organization. So you can check them out at pyladies.com or @NYCPyLadies and of course General Assembly, the glue that brings everyone together. General Assembly is a global pioneer in the education and career transformation space. I work there as a product manager and Ali works there as an instructor and that's how we met and so I will let Ali get to her presentation. \n\n### Let\u00e2\u20ac\u2122s Get Started (2:20)\n\nAli: Awesome. Let me get into the presenter...oh no... what just happened? OK. Um... Let me share my screen. OK  y'all seeing my slides? \n\nTy: Yep. \n\nI\u00e2\u20ac\u2122ve learned a lot from my career mistakes\n\nOK awesome. I get to do this all day every day teaching via Zoom now and always have to ask whether I'm sharing the correct screen because Zoom\u00e2\u20ac\u2122s always changing their interface. It's amazing. So I am going to talk about the career advice that I wish that I had. If you are big on social media or whatever I am @aspittle on all of them so you can find me there. um. \n\n### The Career Advice I Wish I Had (3:20)\n\nI have learned a lot from my many, many, many, career mistakes and I want to share those with you today so that you can avoid making those same mistakes that I did and also hopefully just learn some advice as well. I do want to say before it I start that I know that I am in a position of privilege as a professional developer and a white woman who is college educated and mid-career so I'm coming from that perspective and I know that I cannot represent all different career experiences in this one talk so want to put that up front. That being said I want to talk a little bit about my background just as free me here.  So I did not know what coding was until I was a sophomore in college. I took a Computer Science class thinking that I was going to learn how to format Microsoft Word documents. I thought that's what Computer Science was and so instead I fell into this magical world of typing something into a computer in Python and getting something else out. And that being said I started to take more Computer Science classes thinking I was going to do that as my major or minor or something along those lines and then a little bit later I had really imposter, bad impostor syndrome and I quit. I thought that I just wasn't good at programming. I thought it wasn't for me. I thought I found out about it too late and so I left and so two classes into computer science in college and I quit programming. \n\n5:00 I accidentally became a software engineer though the next year. I learned that I could automate a lot of my own job using Python and so I'm glad to be talking to Python people tonight because Python is where I started my career and again it felt magical for a second time. I was able to do a lot of the automated or the things that I was doing manually in an automated way so it was mostly accidental. So two potential ways to learn to code. I have been through both of them both in dropping out of CS and then also in self-teaching most of code, especially web development and then the third way is through a boot camp for most people and so I've been teaching at GA for the last three years in all sorts of roles there so can definitely speak to that as well and have taught hundreds of students to do that. um \n\n6:00 I have made so many mistakes as this slide says. I've trusted the wrong people, stayed in toxic environments, taken the wrong job, been way underpaid and under titled and his points in my career as well but I've also done some things right which is probably why I'm talking to you right now and I've been so lucky to have grown a pretty significant online following, and just for context, because I think if this is relevant to the discussion that I've been able to build up a blog that gets up to like three hundred thousand reads a month and my social media following is pretty sizable and so I'm coming from that perspective in this talk and talking about how those career moves have really benefited me and how hopefully some things that can be actionable for you. I will also be looking at this Q&A so feel free to stop me at any time. um. I'm pretty comfortable with the talking, teaching, interruptions thing just because, again, I do teach all day so I can definitely answer those. \n\n### Part I: The Job Search (7:06)\n\nOK so the first part of this talk I want to talk about the search itself. So searching for a job and what that looks like. \n\n#### Find Your Niche (7:12)\n\nMy first thing that I would say is to find your niche. Find your sub industry with tech that you want to work in and so for my students I talked about front-end development, back-end development. You could be a full-stack developer. You could be in a UX to engineer so if you really just like HTMLl/CSS more than you like JavaScript that could be an awesome path for you as well. Data Science, Engineering Management, QA Engineer there's so many different paths out there and if you are somebody who is a people person, there is a space for you within tech. That was something that terrified me before going into tech. I thought it is a bunch of introverts. It's not. There's a place there, as well, for you with Engineering Management or with teaching which is also a career path or even just being a developer, being able to interact with people is huge there, as well.  So first find what you're passionate about. What fires you up. What makes him say because if it's something that you're excited about you're going to be so much more likely to want to put time into it and put work into it and it's gonna keep you motivated.  Also to the job search prioritize your values. Success looks wildly different to everyone. This is a conversation I had with some friends recently that success to all of us look very different and success to us personally looks very different than what we projected onto other people. So for me success is feeling stable and that I don't have to worry about my basic needs and feeling fulfilled and feeling like I'm making a difference in people's lives which is what I prioritize where as somebody else they may prioritize money more or they may prioritize work-life balance more and right now at the position I am in in life is work-life balance isn't my top priority but for something next to me it could be and so have those values and prioritize them. They are totally valid even if they are different than somebody else's. I would even recommend writing these down and...thinking about them at every phase of the search so the interview is to make sure that you're asking the questions there that you're going to find out if those things that you prioritize are going to be prioritized by the company. When you're negotiating you can negotiate for more than salary, too. I used to negotiate working seven to three instead of nine to five. You can definitely negotiate for the things that you prioritize. So along those same lines, write down your goals and your non-negotiables. What are the things that are hard limits for you that you for sure are not going to accept in a job? Do you need a certain salary? Do you need a certain amount of work-life balance, superstructured hours, a certain title. What hours the day do you work best? What type of team do you work best on? Do you like big teams? Do you like tight-knit teams? Do you like working remote? Do you like working in-person? All these questions are so important and some of them are going to be more important for people than others. So definitely write them down so that you can revisit them and have them there as a reference. Even when a job sounds awesome you can still revisit that like, oh okay, even though it sounds really awesome it might not be a great fit for me for X and Y reasons.\n\n#### Online Applications suck (10:36)\n\nOnline applications can suck. I have done hiring for a couple different companies as an engineer and it can be a total black hole to apply online because there are hundreds of people filling out applications for one slot and so getting through that process is really, really, really difficult. It is so much easier to get through that process if you know somebody so you all are doing a huge thing by just showing up tonight and showing up to meetups in general. It's going to allow you to make those interpersonal connections so that instead of applying blindly and doing the one-click applications or whatever you're actually putting a name to a face. Um. And there's alternative ways to do things too. I got my first job in tech by cold emailing a company and being like your interests and mine align. I know Python and I also am interested in what you're doing. Will you hire me on as an intern? That's how I got my first job in tech and so um there are so many ways of getting jobs. It's not just limited to those online applications they're really difficult to navigate through. \n\n#### Portfolios (11:51)\n\nPortfolio sites are hugely important if you have time to make one. Even if you do it via something like Squarespace where it's just a couple clicks or even something simpler than Squarespace, Squarespace almost intimidates me but just have some sort of landing page that links to all the information about you and your information and the really nice thing about portfolio sites is that they can show everything about you in the way that you want it to be shown. So for me, I am less big on doing code side projects right now I'm more big on doing speaking and so that's what I prioritize on my site what I feature. So I'll show you a couple of my favorite portfolio sites. First, I'll show mine just because it has to be one of my favorites because it's something that I built. But it has my about. It has talks that I'm doing and some of my writing and that's it. It's really minimal. It didn't take very long to create at all, just a couple hours. Another one of my favorites is from my old coworker Ben Halpern(?)  It's a wild portfolio site. It is so untraditional and it actually plays music and blows up the browser because it's so intensive on things on the speed but it really shows Ben's personality and it shows his interests and it's hilarious and he's really funny. So this is another portfolio site that I think is super, super cool. um. This one's are really out there one way less simplistic than the other ones um this one's a full-blown game and you play the game to get through all the information about them which is pretty wild. So that's a really, really impressive edgecase one. This is another more minimalist one for a designer which I really like as well. So, so many different ways to create a portfolio site. You don't have to go all in. Another thing that I get asked a lot about portfolio sites is if you are less of a front-end person, so your work is less visual, and my recommendation for that would be to have case studies or descriptions of what you've built. So even if it's less visual you can still display it on a portfolio. \n\n#### Make a Searching Page (14:08)\n\nAnother thing that I really liked that's become more of a trend is having a searching page or a hire me page. So this is Ally Palanzi\u00e2\u20ac\u2122s site and on here she has a guide to what she's looking for in a company so like she values diversity and work-life balance and the ability to have a vacation and that you're not an agency or whatever and then when she's available where she wants to live and about her and I thought that this was really awesome because it has exactly what she's prioritizing. She is making the search come to her instead of the other way around. So I found this really inspiring. It's not something that I've ever personally done but if I were to do a full-blown job search I would probably do something like that. I thought it was really cool. \n\n### Part II: Interviewing (15:20)\n\nToxic interviews probably signal a toxic company\nSo that's the first part of the conversation is when you're searching for jobs in the first place and then the next piece of the process is once you've found some places that you're interested in, is interviewing. First off, want to say that toxic interviews which is, definitely, a thing in this industry make a signal that the company itself is toxic too. If they have an interview process that makes them look bad, trust that. If you feel weird during that interview process you probably do not want to work for that company. And I can tell you so many horror stories of jumping through a million hoops or being told by the employee interviewing me that they didn't really like working at the company and they just do it for the status and then jumping through multiple rounds of whiteboarding or having to write code in a Google Doc. Yeah. Not ideal and those are flags and maybe say that maybe this company is not something that I am the most interested in working at. Also if they forget to email you back or they're really sloppy, you're scheduling things all the time that may mean that they're a little bit inefficient or disorganized. \n\n#### Spin what you don\u00e2\u20ac\u2122t know (16:33)\n\nAnother piece of advice is if you get asked a technical question that you don't know the answer to spin that answer.  So if you are asked, do you know React or you know x and y about React or Python or anything like that. What you can say instead of, \u00e2\u20ac\u02dcOh I don't know that\u00e2\u20ac\u2122 instead show your growth mindset say, \u00e2\u20ac\u02dcI don't know React yet but I do know Vue and I know that they both use similar component architecture and I also love learning new things so I'd love to learn that on the job\u00e2\u20ac\u2122. So it meant that you don't know it because it's easy enough to checkin like by asking more detailed questions if you really do know that language or not but we can also always spin it to be a positive and show a growth mindset with questions that you don't know the answer to. \n\n#### Show how you think (16:43)\n\nAlso, if you get asked technical questions show how you think so show your process maybe draw diagrams or pseudocode, intermediate code, explain pitfalls in that code you can definitely be vocal and ask clarifying questions as well because your that's part of being a developer, that's a part of being in tech and so displaying your knowledge is really important. \n\n#### Negotiate (17:59)\n\nAnother piece is always, always, always, always, always negotiate and you can negotiate anything. So we mostly hear about salary negotiations which is so important, especially as underrepresented folks in tech. Negotiating so important to get that up but also if there's less wiggle room with salary you can always negotiate your role. So maybe you can negotiate that one day a week is dedicated to learning. Or that you get to write one day a week for the company blog instead of doing development work. Or you could make it so that you work less hours or you can negotiate...um...remote days working remote a couple days a week which isn't super relevant right now because all the days are remote but down the road that'll be more relevant again. You can negotiate benefits and then the classic which is compensation...um...I follow the following format when I negotiate. So I thank them for the initial offer and tell them that I am excited about the initial offer. I'm excited about their company for X&Y reasons. If I'm considering it I need to be excited about it in some way so I'm gonna state those reasons right there. Tell them what I wanted to negotiate. So I would like more days remote or I would like to be paid X&Y and then I like to list my wins that leads to me getting what I negotiate for. So I have demonstrated X&Y at my time at this company and then explain how I want to help the company in the future. So my talent in X&Y will help you with the other things...um...Seeing a couple questions in the chat and, first off, I will totally send out these slides after. I'll send them to Ty and he can send them out to you all. I can also tweet them out if that is easier. The other question that I'm seeing is how do you negotiate when the offer exceeds your expectations, is at least try to shoot a little bit higher. See if they can wiggle but you could also negotiate for something different than compensation too. So days off or remote time or bonus or something along those lines but always negotiate get that number up. If they're giving you an offer that's higher than your you expect that means that you are under valuing yourself in the first place so that would be my advice there. \n\n#### Don\u00e2\u20ac\u2122t tell prospective employers how much you make (20:42) \n\nAnother piece of advice is to never, ever, ever tell prospective employers how much you make right now. In addition it's illegal in a lot of places. I'm not sure about New York specifically but in a lot of places it is illegal to ask how much you make within an interview. If you do get asked this question spin it. Tell them a range of what you're looking to make in your next position but it's usually good to not put a number out first. Ask them instead what range they are looking to spend for that position. So never, ever, ever, ever, ever tell anybody what you make right now. That will lead to you being in a lower bargaining position when you're in negotiations.\n\n#### Don\u00e2\u20ac\u2122t undervalue your non-tech experiences (21:35)\n\nAnd another piece of advice especially for people in untraditional or from untraditional backgrounds in tech so people who are just graduating from a bootcamp or self teaching, is do not under value your non-technical experiences. So even if you are looking for your first tech role, that doesn't mean that all of your experiences before this go out the window. So if you did something in customer service, that will still help you work with other people in tech. It'll help you deal with...um...the difficult issues and complaints from customers and all that that you'll still have to deal with. If you were a teacher, teaching code is super important as well. All of these things lead to you being a better software engineer or software developer or tech employee and so do not undervalue them, do not take them off your resume, do not take them off your Linkedin and feel free to include them in some interview questions as well. Seeing some more questions so how to negotiate a pay cut in the current situation of business struggles and should you? That's a tough one...um...I know that right now job situations are so different than normal and so you may have to take things that are less desirable than normal, definitely really difficult...um...that's one that I haven't had to deal with personally yet but I don't know if anybody else has an advice for that one. I'm so sorry. Ty: What was the question again?\n\nAli: About negotiating a pay cut in the current situation.\n\nTy: Oooh yeah that's tough.\n\nAly: It's a really tough one. \n\nTy: I guess what's the situation? Was someone like offered it like the company told them they're doing pay cuts and they try and negotiate it up like less of a cut?\n\nAly: That's a really good question.\n\nTy:  Yes. More context would help. I mean my I mean it this is a tough time like my. I'm always thankful every day that I actually still have a job because I know a lot of people have had to take 20-40 percent cuts, a lot of people are unemployed.\n\nAly: Yeah \n\nTy: And I know two people were just furloughed last weekend and they work in tech so yeah it's it's a crazy time.\n\nAly: It\u00e2\u20ac\u2122s a difficult time for sure and very out of the norm. So many things that do not normally happen are happening right now. But I would not go for that unless it's the absolute worst-case scenario. Another question about what red flags to watch out for the during the actual interview. I would say if they have rounds and rounds and rounds and rounds and rounds of interviews that feel like they're asking you the same things that to me would be a red flag that they don't value my time. In fact, I try to ask as many of the questions that I am looking to have answered during the phone screen so that I don't need to take time away from my current job in order to interview. That would look different if you are looking for your first job in tech though I would say at that point to take as many interviews as possible so that you have practice interviewing...um...and then other red flags to look out for is disorganized process then displaying any toxicity during those interviews so if anybody makes any disgusting comments or anything like that during the interview that's like a huge red flag. I probably don't need to explain that though...um...Them asking questions that are illegal. All those types of things are red flags. I would also say that them asking nitpicky, weird, overly technical questions that rely on rote memorization, that for me is another red flag that they are not trusting my experience or that they want me to have things memorized that don't really need to be memorized. So those would be red flags that I would look out for when I am interviewing. And then also a question about how I got my first internship and how it looked helped me when looking for my first tech job. So, yeah, I got my internship just by reaching out to different companies and cold emailing them honestly I would go on to their website and be like you look interesting to me, my background lines up will you hire me? And I would find their CEOs or whatever or partners and especially at startups and I would reach out to them just cold and send them messages which was definitely untraditional and probably is not the best way to go about things but I think it does say to network and use the people around you. So if that's going to meetups and trying to meet people there or if it means...ah...using LinkedIn. I've seen so many students be really really successful on LinkedIn by sending people messages and responding to the people there. \n\nTy: What was your most response rate via cold emails?\n\nAly: So it was actually one to one because I only did it for that one company and they hired me like that same day which was absolutely it kind of should have been red flag probably in retrospect but I ended up working for there for like two and a half years...um...but I would have kept doing it I think even if it didn't work out for that one but it was the first company that I that I did it for and then they were like come in tomorrow for an interview and then they hired me and I worked there for two and half years but...um...yeah but I do not think that's traditional by any means. I see my students see getting jobs mostly through LinkedIn and networking and then also through connections that they had from previous positions as well because those connections don't go away. How often does an engineer need to learn new technologies, produce side projects using new technologies in order to help future-proof their career? That's a really good question but there are so many jobs out there using legacy tech like wasn't there something with the unemployment system where they're looking for for 4 chan developers so I would say that even legacy tech is pretty important and that you should be able to...leverage your experience with older technologies to newer ones as well because even though things change they don't change that much. And so even though I'm not writing Python 2 anymore like Python 3 is pretty similar so you can for write your skills there. I would say that if you have time during your workday to play with different things that's a great thing to do but all these things are connected and so I wouldn't say that it's a necessity, especially, when you do have a couple roles under your belt to keep building those side projects. I think that you need to prioritize what's important to you and so if that is building side projects and learning new things and that's totally valid but if you have other things in your life that you're prioritizing instead I would prioritize that. Any tips about handling conversations without equity? I would say that it's not guaranteed that that's going to work out and so if you really really believe in the product then go for it but don't take equity instead of a salary. I've seen that all the time with people reaching out and Linkedin like you won't get paid but you will have equity once their company starts making money. Do not do that under any circumstances that's exploitation so messed up but handling conversations about equity you I have seen that companies will give you an option of either more equity with a slightly lower salary or a higher salary with slightly less equity. I would say in that case it's gonna depend on how long you see yourself staying at the company and how much you believe in their product. I would say that it is definitely negotiable, anything is negotiable and the numbers are gonna look really really small up front but if you do the math on their growth that tiny percent is going to grow over time. There's different amounts of equity depending on what stage startup they are so a very early precede or like a seed round startup is going to be able to give you a lot more equity but also gonna be a lot more risky whereas somebody who's like a serious C startup who has a bunch of funding they can probably afford to pay more but there they have a lot less equity to give because they've already given a lot of their equity away for the most part. \n(31:03) \nCool. Other questions. Almost done with GA's Data Analytics. Congrats. And long curve marketing business development but no tech work most the job postings require data analysis experience but how can you think you can sell your experience. Well I would say that you are probably using similar tools in your day-to-day now and you have relevant experiences as a professional and working in the field and you can definitely leverage that into your data analysis career...um...list of technologies that you've learned for sure but those skills definitely for a for one to another but I also not a data analyst or a marketer or a business development person so I can speak a little bit less to that if anybody else has more experience and those it would be awesome to talk more about that in the chat. \n\nTy: Yeah. One thing I would say with, with data analytics is if you're still working at a company and you're just doing the data analytics course part-time, try to do a project at work. Every company has data whether it's call data, CRM data, website visit data. Try to work with someone on the team on whatever analytics team and just try to do a project cuz that's one of the few projects you can actually do without messing anything up. Like if you're some if you're learning software developing a website chances are your company's not gonna be like, oh yeah, you can just redo our website like...um...after taking like a small course but data analytics you can get a dump of a database or a CSV file and just crunch some numbers without affecting anything in the business. So that's what I think is the best with the data analytics or data science course.\n\nAly: And then that also says that you have professional data analysis experience too once you do that work project, so awesome. \n\nTy: Do you want to go through the rest of the slides and then do questions or I don't know how many slides you have. \n\nAly: Yeah I'll do that I'll keep going through the slides and then come back to the questions. So keep asking them. I'll come back to them but I don't want to completely go off track. I feel like I am it could be just a AMA that would be kind of fun too but I will go through my slides. OK.  \n\n### Part III: Code Challenges (33:27)\n\nSo the part three is code challenges which is another fun part of this whole process...um... I have a lot of experience with these both on the grading side and on the other side of doing them. \n\n#### Read the instructions (33:44)\n\nSo first off you'd be shocked at how many people do not read the instructions and turn in something different than was asked for. So I would highly recommend reading the instructions, potentially at multiple times and read the instructions again before you turn in the project to make sure that you did all the requirements. You will be better than 90% of applicants if you just read the instructions. I am guaranteeing this...um\u00e2\u20ac\u00a6\n\n#### Go above and beyond (34:16)\n\nAnother thing is if you are really really interested in the role go above and beyond you don't need to spend all your time on this by any means but adding something simple that was not asked for. So in my subfield of software engineering that could be adding tests or adding some styling into something...um...Don't spend all your time on these don't do unpaid work for companies but if you have like an hourlong code challenge and you have 15 extra minutes to spend on it do something above and beyond. That will really, really stand out compared to the other applicants. \n\n#### Follow Best Practices (34:46)\n\nThis kind of goes without saying but follow the best practices for your language. So if you're using Python follow Pepe or add comments, add documentation things like that will go a long way.\n\n### Part IV On the Job (34:57)\n\nSo that's a little bit about code challenges and then pouring into when you actually have the job and things to do at work in order to further your career. \n\n#### Keep a knowledge repository (35:08)\n\nSo first something that I'm really passionate about is keeping a knowledge repository...um...I also want to say that you do not have to do all of this by any means these are just things that I do that I find helpful. So I want to say them because they may be a little bit different than you've heard before but you do not need to do all of this by any means do not feel like you need to. So I keep a knowledge repository full of notes that I'm taking on things that I'm learning...um...shortcuts that I've learned I keep notes on books that I've read as well so I have this Github repository it's literally a repository that I could come back to. I'm also really interested in other note-taking apps as well...um...Github for me is just so simple that I keep everything on there but other amazing tools out there to like Notion were like Rome Research or something like that that I've been seeing all the time on social media recently and I just applied for it. I really want to see what that's like but having some sort of place where you write down what you're learning. Because as a teacher something that really really helps things stick is you writing it down in your own words. So taking notes on things is great and if you have them to come back to it'll help you to solidify what you're learning.\n\n#### Track your wins (36:27)\n\nAnother huge one as somebody who has battled impostor syndrome like no other in this industry is tracking my wins. So for me, I get student feedback all the time from them about what's going well or my teaching or whatever and I will screenshot those and put them all in one place so that if I'm having a bad day, if I'm having impostor syndrome I can come back to those and see all those nice messages and have my heart grow a little bit...um...Same thing with code wins, tracking my progress over time okay remember how hard hello world used to be? Well now I've built this whole application. Look at that growth and tracking those sorts of wins is really awesome. Also having notes about nice things but coworkers have said about you. Nice emails that you've gotten. All those sorts of things that you have them in one place. This also goes so far when you're negotiating that you have all these awesome things that you've done all documented all right there for you so that you can compile them when needed.\n\n#### Find ways to challenge yourself (37:30)\n\nI also have found, especially, when I'm working for a company for a long time that finding a new way to challenge myself keeps it interesting. So I learned test-driven development on the job because I wanted to challenge myself to learn that. Finding ways to keep it interesting even when you've been somewhere for a while and maybe your day-to-day responsibilities have gotten a little bit less interesting. \n\n#### Don\u00e2\u20ac\u2122t tolerate bullshit (38:01)\n\nAnd sorry for the tough language but don't tolerate bullshit. As somebody from an underrepresented background in tech there is going to be so much of that. I cannot tell you how much I've waded through bullshit in my career. You do not have to tolerate it. There's other things out there. You do not deserve that. Your mental health does not deserve that. People are assholes. That's their fault not yours. So I want to remind you of that. Somebody treating you poorly especially because your demographics. That is a them problem not a you problem. It sucks it hurts and it is awful but it's on them and it sucks for you but it's their fault. It's not yours.\n\n#### Burnout is real (38:48)\n\nAnother thing that I spend we t real for me especially recently is that burnout is real. There's a million things to juggle at every time and don't let that happen to yourself find a balance find what works for you and if you're feeling burnt out take that as a warning sign to take some time off, to take some time away from work. Do something that you enjoy. Burn out is a very real thing. Do not work all the time. Do not work 24/7... um...Find some sort of balance. I do not have work email on my phone or on my other computer. I do not have work Slack on my phone or on my other computer. Ty knows this from earlier because I couldn't get on the Zoom call. I keep it very, very separate so that I have some separation and some mental time away from work. It helps me to be more present with my students during the day.\n\n### Part IV: Professional Development (39:43)\n\nAnd then, the last part is professional development. \n\n#### Get involved in the community\n\nSo get involved with the community. You are already a huge step in that direction but the thing that changed in my career the most of anything was writing a blog post and 32 people read my first blog post. I thought that was a ton of people. I thought that was a huge deal that my blog was happening and...um...people were help, getting helped by it and it just grew over time and progressively got bigger and bigger and having that presence in the larger tech community has made me feel more connected to it. I've been able to meet more people like me, especially early in my career when there were absolutely no women on my team. It's nice to be involved in communities like Womenn Who Code and getting involved really changed things for me and I know you always hear that advice write a blog post or something like that but even if it's just for you writing those things down publishing them somebody else will benefit from them and \n\n#### Teach (40:45)\n\nTeaching this one's kind of personal to me but it helps so much to understand things if you have to explain it in a very beginner-friendly way and teaching what you know can help raise your profile it can help build a brand whatever that means and it can get you more and more connected to the community as well. So you do what you know. Speak at a meetup, write a blog post, tweet something, respond to something on a developer forum. There's so many different ways to teach even if it's not something like quitting your job to become an instructor or something like that. There's little tiny ways that you can teach or mentor a junior developer at work. \n\n#### Make friendships in the industry when you are not looking for a job (41:31)\n\nI talked about portfolios already...um...Make friendships in the industry when you're not looking for a job. This might not be the right time for some of you but if you are employed...um...I have gotten every subsequent job in tech from friendships that I've had previously. So my second job was at GA and I got the job at GA because I was guest left Jane because one of my friends taught the data science program and that's how I got the position that I'm currently in. I did leave GA for a couple months to work for another company and that one again was working for a friend as well. So some friendships that are just for networking are great but if you can have genuine friendships where you're challenging yourself and learning from each other and growing together when you're not job searching. That goes a long way as well and can be really, really useful for getting references and things like that down the road.\n\n#### T-Shape your knowledge (42:33)\n\nAnother thing that I like to talk about for shaping your knowledge when you're learning new things is having a T-Shape. So T-Shape is having shallow knowledge about a lot of different topics. So knowing what X&Y is knowing how to do a hello world with X or Y but not necessarily knowing it in depth. Just knowing it enough to talk about it and then having something that you're specialized in and that's the bottom of the team that's how I normally recommend for people to just shoot their knowledge too so what to specialize in. So have some sort of exploration into different topics but then find something that you really are knowledgeable and passionate about.\n\n#### Keep in touch welearncode.com @aspittel (43:26)\n\nOkay so now I'll move back to the questions if you have more they are in there...um...keep in touch if you are dropping off now I'm at welearncode.com and @aspittle on all the socials and I will switch back to questions. So I'm a former physics PhD grad who did a stint in administrative work for a while. I'm looking to resign my current position but put my full energy into pursuing career as a developer. Between networking, self teaching,  portfolio building what activities would be most important to focus on? So I would say it to get comfortable with your skillset and start interviewing to see if your skillset is in the rough ballpark of what companies are looking for and once you're confident with those skills, build out some projects to demonstrate those skills so that employers can see what you are creating and able to create...um...and then having a portfolio to demonstrate those things I think is great, as well. Especially when you're looking for your first job. I think your portfolio is the most important when you are looking for that initial position. So that you can show that you've made projects before and show off those technical skills in that capacity. I would also say that networking events are really important so you're hitting on all the really really important ones. When you can go to networking events, try to do like maybe one a week or something like that so that you are making new connections and fostering those. They don't have to be in person either I mean they're all online right now but you could also join a Slack group. I don't, I just moved to New York City like right before Corona virus hit so I don't know too many Slack groups specific to New York City but I know in DC where I lived for a long time there was a Women Who Code and a DC tech Slack group and those were really, really awesome for networking as well and you could just drop in throughout the day and chat with people there. Also social media, on Twitter is really big for developers and LinkedIn also exists most of the recruiters are in there so that one's important too. Cool. \n\n(45:32) \nAs a woman in tech, have you ever faced prejudice or microaggressions? Definitely, definitely I definitely have dealt with a lot of wild things in my career, especially, I got my first developer job when I was like 19 years old and so stuff at that point in my career was really wild but even at industry events and at conferences and things like that now it's always tough to see and experience even later in my career and it's it's sad, it's sad the industry still in this place but it does make me motivated to see events where there are more women and my job at GA too. It's really awesome to see new developers coming up who change the industry for the better I hope. But it's definitely still rough out there and if you are dealing with something like that you're not alone it's not just you it's the way that the industry is unfortunately and I don't think it's just this industry either I think it's a wider problem, as well. \n\n(46:42)\nDo you think it's difficult to switch between data science and web development,computer science and how is it best to figure out which one you like best? That's a really good question. I started off in a Python-heavy more data science role and then move more into web development because I enjoyed the more visual side of things and the kind of creative interfaces all that. I found it fun...um....so I think it is definitely possible because the coding fundamentals are the same name from to get a science to web development to computer science. The idea of a function in for loop is the same across all three. It's just that the technologies do change. So I would say that it takes time and work in making a portfolio and all that to show off your skills but it definitely is possible and it's easier to move from one to the other rather than from zero to one of them would be my advice there. \n\n(47:35) \nThen the next one. I'm interested in a very niche technical position that may not have a much in the way of job positions. How does one look for network and engage in that sphere building a database operating system development, compilers reverse engineering etc? Wow you are impressive that is super cool things that I know nothing about it especially compilers, I mean, I would building a database that is so cool oh my goodness I feel like just write a blog post about a couple of those things and I will 100% read all of them um because that sounds like the most impressive skillset I've ever heard...um...I would say it's to try to find out where the people in your subfield are hanging out. So who are the people writing blog posts who are the people hosting meetups if they exist and try to network in those spheres. But that one is way out of my depth. I definitely not my world but I'm incredibly impressed by it.\n\n(48:41)\nTy: Yeah I know I'd like to add, yeah, maybe check out Stack Overflow has like some exchanges maybe check out like the Compiler Exchange or those kind of fields or check out subreddits about them you can kind of talk and engage in community and see what's going on. I know a couple people who've got jobs off just like being active on Reddit \n\nAly:  that's an interesting one. Reddit might fit that skill set pretty well. Brand new decoding and starting a June SEI class with GA. So exciting. That is amazing I might have you as a student. What's your advice for me starting my journey?...um...okay. \n\n(49:23) \nSo for SEI students I would say to do your homework and to do as much self-teaching beforehand, as possible. First so that you know that you enjoy the subject and it's something that you want to pursue but, secondly, so that when you're seeing them at the course you are seeing them for a second time. So the best way that people learn, from a technical perspective, is spaced repetition. So seeing the same topic multiple times over a length of time and so if you have seen these topics once on your own and then you're taught it again a second time in more detail with an instructor in a different setting. That information is going to stick so much better in the classroom if you have seen it before then if it's the very first time that you're seeing it. So, also, your projects will be super impressive as well so that would be my initial advice but even going to events like this as a huge leg up and will really give you in the job search process. \n\n(50:28)\nAny thoughts on companies that opt to test candidates on data structures and algorithms over asking candidates to build something especially for front-end roles? For me, I really think that building things and front-end specific questions they're so much more relevant than the data structures and algorithms. Things first for me, I feel like a lot of the data structures and algorithms questions are weed out for people with untraditional backgrounds so people who didn't have a computer science degree. It feels sometimes to me like a weedout for people who were self-taught or who went through boot camps and boot camps do you teach the data structures and algorithms to an extent but it does worry me that they're trying to be a little bit gatekeeping with those questions. So I think that it does obviously depend on the question and the company but to me it'd be something that would make me think twice about what they are actually asking that question for. If I'm going to use those things on the job,  then I think it's totally valid to ask those questions. So if I'm going to be building something that's super data structure and algorithm heavy then yeah asking those questions that's fine but if I'm not gonna be building binary search trees every day I'd rather be at something about CS would be my two sense.\n\n(51:48) \nShould I apply to a job post if I feel like I will be a great fit but I don't have enough experience or out the requirements that they're looking for? how could I make companies notice me if you're just starting your career? Okay. Even if you do not fit all of the job descriptions apply. The requirements on job postings I think are normally way more than they're actually looking for. They're just putting things on there to have search terms or something like that...um...usually you do not have to meet all the requirements that they are listing on there whatsoever. There's no harm in trying unless they're asking you to jump through a million hoops but I would say to still try it. Especially if it is a great fit something that looks like a perfect fit for you...um...and then how to make companies notice you know I think having a portfolio that stands out and networking goes so far because if somebody can put a face to a name and it's you're not just a resume and a stack of resumes. That is going to get you way ahead especially if they have hundreds of applicants. So that would be my advice there. \n\n(52:53) \nDo you know many folks doing data science for self-taught and who have gone to a bootcamp and don't have degrees. It seems possible from front-end web development jobs that I hear less about it for other developer jobs. So GA does have a data science program for boot camp and those grads do awesome. That's most of my experience with data science from an untraditional background. Somebody else can probably answer that question better but definitely I've seen a ton of GA data science grads who have gone on to do awesome things\n\n(53:30) \nTy: Yeah I think one thing with that sometimes you might have to start at the data analyst level and then work up to the data science...um..,but if there's nothing wrong with that you know sometimes not everyone can just jump to that so that might be something to keep in mind as well to take just like a junior analyst level role and then move up. \n\n(53:54) \nAly: Yeah and with anything with being self-taught, I think portfolios go even further because they show your different projects that you've built and showing that skill is really important. Another thing would be to try to do some freelance gigs as well for anybody who's self teaching because that's professional experience on your resume and having anything for a professional basis goes a long way too. \n\n(54:20) \nI get brain freeze when somebody asked to solve a problem on the spot and write code for it. How to get over these nerves in the interview? Oh, I hear you. It is so hard. It is not natural by any means to have to write code under pressure. So that is a very normal experience to be afraid of that or to be a little bit anxious during those situations. In fact I feel like it would be more abnormal not be anxious in those types of situations I would first think about what they're asking. I would write pseudocode first so not actual code but write down in words how you might solve that problem and outline it and just write some rough code down and then refactor it and make it better down the road. I think it's also fine to acknowledge that you are nervous. That's something that I would do is like it's kind of anxiety-provoking to be having to ask something like that on the spot and it's also okay to admit what you don't know. So if it's not something that you've seen before you can talk about your approach and the different things that you would do to find that solution but that you know that your example your answer is not exactly correct and it's gonna have X&Y bug. I think showing your thought process is the most important part of it anyways. \n\n(55:38)\nIf you have to go in a junior role how long should you stay before thinking about not finding another job? That's a really good question I would say that it's totally valid to look as soon as you're not happy in that position anymore and trying to apply and interview is perfectly valid. As far as time goes I would say that most people stay in a junior position for like one to two years would be my ballpark right there but totally valid to look faster than that as well because usually jumps are gonna happen from company to company instead of internally. \n\nTy: Yeah. I've never done this but I know a friend that's a software engineer and and someone gave him this advice he said just apply for jobs every year, every 12 months just applied new jobs even if you don't want to take it just so you're always good at interviewing. He does that every year he'll apply to like five or ten jobs and just interview and if he gets a good offer he likes it you'll go but otherwise you'll just stay \n\nAly: Actually really smart. interviewing and tech is such a skill set in and of itself and so having to strengthen that skillset I think is a smart thing to do and I wish that I had actually interviewed more because I have barely interviewed and so it scares me more now yeah \n\nTy: I mean it's like a skill say you use like once every three to five years..um..I think is there so we'll probably wrap up if anyone has any more questions you could just ask one or two more we can do that oh \n\nAly: Oh that's just a question yeah just go so far I've not even an oversee that enough because you're demonstrating your skill set in your explaining things in clean English which shows you, that you know your stuff so well so blogging A plus\n\nTy: Yeah my thing with with stuff like that like blogging or or giving a talk is that, of the hundred people that wanna change jobs or want to be a data scientist, very few people will do that right there's like 100 people that want to change in like two or three of those hundred will actually write blog posts or be active so doing what very few people are doing will help you stand out much more. Like everyone is applying to jobs online right like everyone's doing that so you're not gonna differentiate yourself but I guess a lot of people are blogging now cuz they'll have more free time but yeah if you can write something interesting. For example, a lot of the stuff I see on media miss is just not that high quality it's very short. It's very superficial so if you can really put the time in to like a unique project. I saw someone do a project about he was in San Francisco and he would get a lot of parking tickets cuz he had a car and so he did a project where he he actually emailed San Francisco like the city government. You can email sometimes governments for data and he got all the data on parking tickets for the last 12 months and, yeah, he just send requests and they sent him back and then he like did a like clustering analysis on where parking tickets were most likely given in San Francisco. He wanted to find out if there was a place to park that he can avoid ticket to like some pattern, like if he could park there on Tuesday or Wednesday. He didn't find anything I mean that and that's one of the that's one of things a lot of people don't realize with the data sciences. Sometimes you actually don't discover anything or you just disprove hypothesis or there's nothing to discover right. There's no answer to your question and so that was that was kind of this resolution to his project. there was no there was nowhere to park in San Francisco where you are safe.\n\n(59:37)\nAly: Well. Oh where should be publish your blog? Like I think this is gonna depend on your domain. I would say that for developers so really software people dev2 is a really really great source. I know like I'm biased because I used to work for them but dev 2 is really great...um...I also think that there's a lot of validity and owning your platform so having a place where you publish your own blog post, so a portfolio site or spinning up a wordpress site or something along those lines then you totally have ownership of your content...um...Medium is also another place I'm not sure if it's still the place to go for data scientists but there was a lot of issues with it with like web developers and so I think most of them kind of moved off of it but Medium was a really big platform as well.\n\n(1:00:29)\nTy: I would take one last question. Looks like we got one more from Karen and then we'll wrap up.\n\n(1:00:45)\nAly: About asking questions at the end of interview. What\u00e2\u20ac\u2122s an important one to gauge their interest and if they would you would fit in the country... in the company?...um... I ask things like what the day-to-day for the job would look like so that you have an example of what is going to happen in that position...um...I also had some really good ones as well recently. \n\nTy: Yeah. I'm actually really good at asking questions. It's like one of my skillsets. I do like a couple of funny ones but one, one I actually came up with recently is I'm actually very anti-meeting culture like where you have a lot of meetings so sometimes I'll ask or I've thought to ask like oh how often do you have meetings or why do you have meetings when you work on projects to see if people have regularly scheduled meetings or if it's like more ad hoc which is kind of what I like and then one that I asked, I used to ask a lot is if you were CEO for a day like what would you change.\n\nAly: Oh that's awesome. That's yeah\n\nTy: So really you really give some insight into people into like what they don't like about their company right because if they could only change one thing if they were the boss.\n\nAly: Yeah \nTy: A lot of people like like more like free cold brew I think you were saying it yeah yeah. I think at the end of the day, a question that shows there's a couple there's a couple strategies right. A question that shows you've done research about the company like you could have something about a large project or initiative that's become public and you could kind of ask details about that and to show your interest in the space. You could talk to about trends in the industry like what someone thinks about like an upcoming trend. For example, if you are interviewing at GA you could talk about like ISAs which are a type of financing or like remote learning or things like that yeah or anything that kind of aligns with your interests as well. \n\n(1:02:42)\nTy: Alright that's it for the event. Thanks a lot Ali for the presentation and taking a bunch of questions. \n\nAly: Totally this was fun.\n\nTy: And then we'll, GA will, General Assembly will send out an email in a couple days with the recording so everyone will have that as well. All right thank you everyone I will end the recording now oh you're getting a lot of things coming in. \n\nAly: Oh awesome. Thank you all for coming. \n\nTy: It's different when you can't actually see the people in person, right? \n\nAly: Yeah. \n\nTy:Just bytes. just by chat \n\nAly: No I'm seeing the chats now and I like the QA and the chat. Yeah. Next to each other but I'm also looking at the wrong screen. It's such a mess but thank you all this is really fun I also meet MIT's real meetups and pizza and all of that as well very much so real life in general. \n\nTy: Are you doing any talks in the future any like planned chunks or webinars I guess or no they're all virtual talks \n\nAly: Yeah. I'm doing one for the Service Conference next week...um...I don't know. I think I was supposed to give a couple that I decided to pass on because. I don't know... \n\nTy: Burnout?\n\nAly: Burnout is real. Yep I said that. Really \n\nTy: All right.", "idn": "04", "video_url": "https://youtu.be/1X5h0FRqKVs", "title_kw": "career", "meta_json": "04.json", "audio_track": "04_1X5h0FRqKVs.mp4", "audio_text": "04_1X5h0FRqKVs.txt", "has_transcript": true, "status": "Needs reviewer", "notes": ""}